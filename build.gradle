buildscript {
    repositories { jcenter() }
    dependencies { classpath 'de.esoco.gwt:gwt-gradle-plugin:1.+' }
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'de.esoco.gwt-lib'

project.group   = 'de.esoco'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

// substitute local project dependencies if available
configurations.all {
	resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
		if (dependency.requested instanceof ModuleComponentSelector &&
			["org.obrel" ,"de.esoco"].contains(dependency.requested.group)) {
			def targetProject = findProject(":${dependency.requested.module}")
			if (targetProject != null) {
				dependency.useTarget (targetProject, "prefer local project")
				if (name.startsWith("compile")) // only log once
                    println "$project.name using local $targetProject as dependency"
			}
		}
	}
}

dependencies
{
	api 'de.esoco:esoco-common:1.3.+'

	testImplementation platform('org.junit:junit-bom:5.5.2')	
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'junit:junit:4.12'
	
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine' // JUnit4 support
}


gwt {
    gwtVersion = '2.8.2'
}

// sources are need for the GWT compiler
jar { from sourceSets.main.allSource }

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

tasks.withType(Javadoc) {
    // workaround for javadoc errors from references to gwt-user.jar
    options.addStringOption("sourcepath", "")
    failOnError = false
    options.addBooleanOption('quiet', true)
    
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:none', true) 
    }
}

eclipse {
	classpath {
		// add GWT plugin container and prevent buildship from replacing the
		// eclipse classpath (which would remove GWT)
		containers 'com.gwtplugins.gwt.eclipse.core.GWT_CONTAINER',
		           'org.eclipse.buildship.core.gradleclasspathcontainer'
	}
}
// ----------- Bintray Release -----------

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7' }
}
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

bintray {
	user = project.hasProperty('bintrayUser') ?
				project.property('bintrayUser') :
				System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ?
				project.property('bintrayApiKey') :
				System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true

	pkg {
		repo = 'sdack'
		name = project.name
		version {
			name = project.version
	    }
    }
}

buildscript {
	repositories { jcenter() }
	dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+' }
}
apply from: 'publish.gradle'